# -*- coding: utf-8 -*-
"""AI-Powered Customer Churn Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vt-Kq_Fbtb3eF3SzVfFTfky3shX-JlHA
"""

from google.colab import files
uploaded = files.upload()



!unzip "archive (1).zip"

import pandas as pd


df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')


df.head()

df.info()

df.describe()

df.isnull().sum()

(df == ' ').sum()

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

df.isnull().sum()

df.dropna(inplace=True)

df = pd.get_dummies(df, drop_first=True)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

X = df.drop('Churn_Yes', axis=1)
y = df['Churn_Yes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

df.dropna(inplace=True)


df = pd.get_dummies(df, drop_first=True)


print("Final dataset shape:", df.shape)

for col in df.columns:
    print(f"{col}: {df[col].nunique()}")

for col in df.columns:
    print(f"{col}: {df[col].nunique()}")

X = df.drop('Churn_Yes', axis=1)
y = df['Churn_Yes']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


print("Any NaNs in X_train?", X_train.isnull().values.any())
print("Any NaNs in y_train?", y_train.isnull().values.any())


model = RandomForestClassifier(n_estimators=100, random_state=42)


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


print(" Accuracy:", accuracy_score(y_test, y_pred))
print("\n Classification Report:\n", classification_report(y_test, y_pred))
print("\n Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

df_viz = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')

# Convert Churn to binary for clarity
df_viz['Churn'] = df_viz['Churn'].map({'Yes': 1, 'No': 0})

# Now plot
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(6,4))
sns.countplot(x='Contract', hue='Churn', data=df_viz)
plt.title("Churn by Contract Type")
plt.show()

import joblib


joblib.dump(model, 'churn_model.pkl')